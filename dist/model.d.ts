import { ColumnEventListener, IColumn, ISort, ITableConfig, ITableModel, ObjectWithKey, RowEventListener, SelectionEventListener, SortEventListener } from "./types";
export declare function getSortableValue<R>(row: R, column: IColumn<R>): any;
export declare class TableModel<K extends keyof R, R extends ObjectWithKey<K, V>, V = R[K]> implements ITableModel<K, R, V> {
    keyField: K;
    columns: Array<IColumn<R>>;
    selection: Set<V>;
    sort: ISort | undefined;
    sortedRows: R[];
    private rows;
    private rowListeners;
    private columnListeners;
    private selectionListeners;
    private sortListeners;
    constructor(config: ITableConfig<K, R, V>);
    setRows(newRows: R[]): void;
    setColumns(newColumns: Array<IColumn<R>>): void;
    setSelection(newSelection: Set<V>): void;
    setSort(newSort: ISort | undefined): void;
    isSelected(row: R): boolean;
    addRowListener(listener: RowEventListener<R>): void;
    addColumnListener(listener: ColumnEventListener<R>): void;
    addSelectionListener(listener: SelectionEventListener<V>): void;
    addSortListener(listener: SortEventListener): void;
    removeRowListener(listener: RowEventListener<R>): void;
    removeColumnListener(listener: ColumnEventListener<R>): void;
    removeSelectionListener(listener: SelectionEventListener<V>): void;
    removeSortListener(listener: SortEventListener): void;
    destroy(): void;
    private sortRows;
}
